RE_THUMB = Regex("image: *'([^']+)")
RE_VIDEO = Regex("file: *'([^']+)")

####################################################################################################
def MetadataObjectForURL(url):

  html = HTML.ElementFromURL(url)

  title = html.xpath('//title/text()')[0].rsplit(' Gamekings')[0]
  summary = html.xpath('//meta[@name="description"]/@content')[0]

  try:
    thumb = html.xpath('//script[contains(., "jwplayer") and contains(., "image")]/text()')[0]
    thumb = RE_THUMB.search(thumb).group(1)
  except:
    thumb = ''

  return VideoClipObject(
    title = title,
    summary = summary,
    thumb = Resource.ContentsOfURLWithFallback(thumb)
  )

####################################################################################################
def MediaObjectsForURL(url):

  return [
    MediaObject(
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC,
      container = Container.MP4,
      video_resolution = '720',
      audio_channels = 2,
      optimized_for_streaming = True,
      parts = [
        PartObject(key=Callback(PlayVideo, url=url))
      ]
    )
  ]

####################################################################################################
@indirect
def PlayVideo(url):

  html = HTML.ElementFromURL(url)
  video = html.xpath('//script[contains(., "jwplayer") and contains(., ".mp4")]/text()')

  if len(video) < 1:
    raise Ex.MediaNotAvailable

  video_url = RE_VIDEO.search(video[0])

  if not video_url:
    raise Ex.MediaNotAvailable

  return IndirectResponse(VideoClipObject, key=video_url.group(1))
